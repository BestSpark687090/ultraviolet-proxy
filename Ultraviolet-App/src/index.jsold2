import { createServer } from "node:http";
import { join } from "node:path";
import { hostname } from "node:os";
import wisp from "wisp-server-node";
import Fastify from "fastify";
import fastifyStatic from "@fastify/static";
import { H } from "@highlight-run/node";

// Initialize Highlight
H.init({
	projectID: "132006",
	serviceName: "node-highlight-proxy",
	environment: "prod",
	networkRecording: {
		enabled: true,
		recordHeadersAndBody: true,
	},
	tracingOrigins: true,
	privacySetting: "none",
});

// Static paths
import { publicPath } from "ultraviolet-static";
import { uvPath } from "@titaniumnetwork-dev/ultraviolet";
import { epoxyPath } from "@mercuryworkshop/epoxy-transport";
import { baremuxPath } from "@mercuryworkshop/bare-mux/node";

const fastify = Fastify();

// Log all incoming requests
fastify.server.on("request", (req, res) => {
	// console.log(`Incoming Request: ${req.method} ${req.url}`);
});

fastify.addHook("onRequest", (request, reply, done) => {
	// Log requests to /uv/ endpoints
	if (request.url && request.url.startsWith("/uv/service")) {
		// console.log(`Logging URI (onRequest): ${request.url}`);
	}
	done();
});

// Register static files
fastify.register(fastifyStatic, {
	root: publicPath,
	decorateReply: true,
});

// Serve UV config file
fastify.get("/uv/uv.config.js", (req, res) => {
	return res.sendFile("uv/uv.config.js", publicPath);
});

// Register additional static routes
fastify.register(fastifyStatic, {
	root: uvPath,
	prefix: "/uv/",
	decorateReply: false,
});

fastify.register(fastifyStatic, {
	root: epoxyPath,
	prefix: "/epoxy/",
	decorateReply: false,
});

fastify.register(fastifyStatic, {
	root: baremuxPath,
	prefix: "/baremux/",
	decorateReply: false,
});

// Handling WebSocket upgrades
fastify.server.on("upgrade", (req, socket, head) => {
	// console.log(`Upgrade Request: ${socket.addListener}`);
	socket.addListener("data", function (d) {
		if (d.includes("BestSpark")) {
			console.log("what");
		}
		// console.log(d.toString());
	});
	socket.addListener("finish", function (d) {
		console.log(d);
	});
	if (req.url.endsWith("/wisp/")) {
		wisp.routeRequest(req, socket, head);
	} else if (req.url && req.url.startsWith("/uv/service/")) {
		console.log(`WebSocket Upgrade URL: ${req.url}`);
	} else {
		socket.end(); // Close the connection for unsupported routes
	}
});

// Start the server
const port = parseInt(process.env.PORT) || 8080;
fastify.listen({
	port: port,
	host: "0.0.0.0",
});
// Graceful shutdown
process.on("SIGINT", shutdown);
process.on("SIGTERM", shutdown);

function shutdown() {
	console.log("Shutting down server...");
	fastify.close(() => process.exit(0));
}
